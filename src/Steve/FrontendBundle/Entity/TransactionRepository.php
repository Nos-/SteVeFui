<?php

namespace Steve\FrontendBundle\Entity;

use Symfony\Component\Serializer\Serializer;
use Doctrine\ORM\EntityRepository;

/**
 * ConnectorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{
	public function findAllByJoinedToConnector($filter)
	{
		$where = "1=1";
		if (!empty($filter))
		{
			$where = "";
			foreach ($filter as $key => $value){
				if (!empty($value))
				{
					switch ($key){
					case "t.starttimestamp":
						$where.=" ".$key ." > '" . $value ."' and ";
						break;
					case "t.stoptimestamp":
						$where.=" ".$key ." < '" . $value ."' and ";
						break;					
					default:	
						$where.=" ".$key ." = '" . $value ."' and ";
					
					}
				}
			}			
			$where.="1=1";
		}
		
		$fields = array('c.connectorid as connectorid', 'IDENTITY(c.chargeboxid) as chargeboxid', 't.transactionPk', 't.starttimestamp', 't.stoptimestamp', 't.startvalue', 't.stopvalue', 'IDENTITY(t.idtag) as idtag');
		$query = $this->getEntityManager()->createQueryBuilder()
		->select($fields)
		->from('SteveFrontendBundle:Transaction', 't')
		->leftJoin("SteveFrontendBundle:Connector", "c", "WITH", "c.connectorPk=t.connectorPk")
		->where($where)
		->addOrderBy('t.transactionPk', 'desc')
		->getQuery();		
		
		try {
			return $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
		return null;
	}
	public function getTransaction($filter = array())
	{
		$transactions = $this->findAllByJoinedToConnector($filter);
		$transactions_new=array();
		foreach($transactions as $transaction) {
			$transaction["durationtimestamp"] = "";
			$array_transaction_stoptimestamp = (array) $transaction["stoptimestamp"];
			if (!empty( $array_transaction_stoptimestamp)){
				$time = $transaction["stoptimestamp"]->getTimestamp() - $transaction["starttimestamp"]->getTimestamp();
				if ($time>0){
					$start_date = new \DateTime();
					$transaction["durationtimestamp"] = $start_date->setTimestamp($time);
				}else{
					
				}
			}
			if ($transaction["stopvalue"] > $transaction["startvalue"])
				$transaction["durationvalue"] = $transaction["stopvalue"] - $transaction["startvalue"];
			else
				$transaction["durationvalue"] = 0;
			
			$transactions_new[] = $transaction;
			
		}
		return $transactions_new;
	}
}